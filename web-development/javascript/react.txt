=================================================================================
Installation:
Install node and npm:
- https://nodejs.org/en/download/
- Download and install node
- it will install both node and npm

Print version of node and npm:
node -v
npm -v

To make visual studio code work from CLI:
- Open Visual Studio Code
- Cmd + Shift + P - "Install Code command in PATH"

React commands:
npx create-react-app hacker-stories
cd hacker-stories
code .

To run:
npm run start (ctrl+c to exit)
npm run test

To Deploy:
npm run build

References:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var
https://reactjs.org/docs/hello-world.html
======================================================================================
JSX:
- Consider below syntax:
	const element = <h1>Hello, world!</h1>;
This funny tag syntax is neither a string nor HTML.
It is called JSX, and it is a syntax extension to JavaScript. We recommend using it with React to describe what the UI should look like. 

Embedding Expressions in JSX:
- In the example below, we declare a variable called name and then use it inside JSX by wrapping it in curly braces:
	const name = 'Josh Perez';
	const element = <h1>Hello, {name}</h1>;

	ReactDOM.render(
  		element,
  		document.getElementById('root')
	);

- In the example below, we embed the result of calling a JavaScript function, formatName(user), into an <h1> element.
	function formatName(user) {
  		return user.firstName + ' ' + user.lastName;
	}

	const user = {
  		firstName: 'Harper',
  		lastName: 'Perez'
	};

	const element = (
  		<h1>
    		Hello, {formatName(user)}!
  		</h1>
	);

	ReactDOM.render(
  		element,
  	document.getElementById('root')
	);

- You can also use expressions in the element
After compilation, JSX expressions become regular JavaScript function calls and evaluate to JavaScript objects.
This means that you can use JSX inside of if statements and for loops, assign it to variables, accept it as arguments, and return it from functions:

function getGreeting(user) {
  if (user) {
    return <h1>Hello, {formatName(user)}!</h1>;
  }
  return <h1>Hello, Stranger.</h1>;
}

-Specifying Attributes with JSX
You may use quotes to specify string literals as attributes:
	const element = <a href="https://www.reactjs.org"> link </a>;
You may also use curly braces to embed a JavaScript expression in an attribute:
	const element = <img src={user.avatarUrl}></img>;
Donâ€™t put quotes around curly braces when embedding a JavaScript expression in an attribute. You should either use quotes (for string values) or curly braces (for expressions), but not both in the same attribute.

- Specifying Children with JSX
If a tag is empty, you may close it immediately with />, like XML:
	const element = <img src={user.avatarUrl} />;
JSX tags may contain children:
	const element = (
  		<div>
    		<h1>Hello!</h1>
    		<h2>Good to see you here.</h2>
  		</div>
	);
