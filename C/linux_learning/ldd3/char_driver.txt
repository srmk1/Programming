Steps for a device driver:
--------------------------
1. Device number Registration is the first of many tasks that driver code must carry out. 
    - You can choose a major number yourself OR
    - Kernel can dynamically allocated the major number for your driver
/*
 * Get a range of minor numbers to work with, asking for a dynamic
 * major unless directed otherwise at load time.
 */    
if (scull_major) {
  dev = MKDEV(scull_major, scull_minor);
  result = register_chrdev_region(dev, scull_nr_devs, "scull");
} else {
  result = alloc_chrdev_region(&dev, scull_minor, scull_nr_devs,"scull");
  scull_major = MAJOR(dev);
}

if (result < 0) {
printk(KERN_WARNING "scull: can't get major %d\n", scull_major);
return result;
}

2. Character Device Registration
As soon as cdev_add returns, your device is “live” and its operations can be called by the kernel. You should not call cdev_add until your driver is completely ready to handle operations on the device.
      int devno = MKDEV(scull_major, scull_minor + index);
      cdev_init(&dev->cdev, &scull_fops);
	    dev->cdev.owner = THIS_MODULE;
	    dev->cdev.ops = &scull_fops;
	    err = cdev_add (&dev->cdev, devno, 1);  //Associate device number with cdev structure
	   
3. Writing open, release, read, write apis
  
Data structures used by driver:
-------------------------------
1. file_operations structure
Each open file (represented internally by a file structure) is associated with its own set of functions(by including a field called f_op that points to a file_operations structure). The operations are mostly in charge of implementing the system calls and are therefore, named open, read, and so on. We can consider the file to be an “object” and the functions operating on it to be its “methods,” using object-oriented programming terminology to denote actions declared by an object to act on itself.
  struct file_operations scull_fops = {
    .owner = THIS_MODULE,
    .llseek = scull_llseek,
    .read = scull_read,
    .write = scull_write,
    .ioctl = scull_ioctl,
    .open = scull_open,
  .release = scull_release,
  };
  
2. file structure
The file structure represents an open file. (It is not specific to device drivers; every open file in the system has an associated struct file in kernel space.) It is created by the kernel on open and is passed to any function that operates on the file, until the last close. After all instances of the file are closed, the kernel releases the data structure.

3. inode structure
The inode structure is used by the kernel internally to represent files. Therefore, it is different from the file structure that represents an open file descriptor. There can be numerous file structures representing multiple open descriptors on a single file, but
they all point to a single inode structure.
The inode structure contains a great deal of information about the file. As a general rule, only two fields of this structure are of interest for writing driver code:
    dev_t i_rdev;   - For inodes that represent device files, this field contains the actual device number.
    struct cdev *i_cdev;    - struct cdev is the kernel’s internal structure that represents char devices; this field contains a pointer to that structure when the inode refers to a char device file.
    
 4. cdev structure
 
